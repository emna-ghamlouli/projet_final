pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'Docker'
        BACKEND_IMAGE = 'ghamlouli/demo'
        FRONTEND_IMAGE = 'ghamlouli/frontend'
    }

    tools {
        nodejs 'NodeJS 18'
    }

    stages {

                stage('Build Backend') {
            steps {
                dir('demo') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean package -DskipTests'
                }
            }
        }
        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }


        stage('SonarQube Scan - Backend') {
            steps {
                dir('demo') {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
                        chmod +x mvnw
  ./mvnw clean verify sonar:sonar \
  -Dsonar.projectKey=backend
    
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
        stage('SonarQube Scan - Frontend') {
            steps {
                dir('frontend') {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
    -Dsonar.projectKey=frontend \
  -Dsonar.sources=.
    
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }


        stage('Deploy MySQL to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                        kubectl apply -f K8S/mysql-pv.yaml
                        kubectl apply -f K8S/mysql-pvc.yaml
                        kubectl apply -f K8S/mysql-deployment.yaml
                        kubectl rollout status deployment/mysql
                    '''
                }
            }
        }

        stage('Docker Build&Push') {
            steps {
                withDockerRegistry(credentialsId: 'Docker', url: '') {
                    sh 'docker build -t ${BACKEND_IMAGE}:latest ./demo'
                    sh 'docker push ${BACKEND_IMAGE}:latest'
                    sh 'docker build -t ${FRONTEND_IMAGE}:latest ./frontend'
                    sh 'docker push ${FRONTEND_IMAGE}:latest'
                }
            }
        }

        stage('Deploy Backend to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                        kubectl apply -f K8S/backend-deployment.yaml
                        kubectl rollout status deployment/backend
                    '''
                }
            }
        }

        stage('Deploy Frontend to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                        kubectl apply -f K8S/frontend-deployment.yaml
                        kubectl rollout status deployment/frontend
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '✅ Déploiement terminé avec succès !'
        }
        failure {
            echo '❌ Échec du pipeline !'
        }
    }
}
