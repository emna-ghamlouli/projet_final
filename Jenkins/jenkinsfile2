pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'Docker'            // ID des credentials Jenkins pour Docker Hub
        BACKEND_IMAGE = 'ghamlouli/demo'           // Nom de l'image backend
        FRONTEND_IMAGE = 'ghamlouli/frontend'     // Nom de l'image frontend
    }

    tools {
        nodejs 'NodeJS 18'              // Utilise NodeJS installé via Jenkins
    }

    stages {
  
        stage('Build Backend') {
            steps {
                dir('demo') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean package -DskipTests'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }




        stage('Deploy MySQL to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                    kubectl apply -f K8S/mysql-pv.yaml
                    kubectl apply -f K8S/mysql-pvc.yaml
                    kubectl apply -f K8S/mysql-deployment.yaml
                    kubectl rollout status deployment/mysql
                    '''
                }
            }
        }
                stage('SonarQube Scan - Backend') {
            steps {
                dir('demo') {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
mvn clean verify sonar:sonar \
  -Dsonar.projectKey=backend \
  -Dsonar.host.url=http://13.38.91.176:9000 \
  -Dsonar.login=sqp_d19059690ae2a75ad900cec356f012a8a07a57b7
                          
                        '''
                    }
                }
            }
        }
stage('Docker Build&Push') {
    steps {
        withDockerRegistry(credentialsId: 'Docker', url: '') {

            // Backend
            sh 'docker build -t ${BACKEND_IMAGE}:latest ./demo'
            sh 'docker push ${BACKEND_IMAGE}:latest'

            // Frontend
            sh 'docker build -t ${FRONTEND_IMAGE}:latest ./frontend'
            sh 'docker push ${FRONTEND_IMAGE}:latest'
        }
    }
}

        stage('Deploy Backend to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                    kubectl apply -f K8S/backend-deployment.yaml
                    kubectl rollout status deployment/backend
                    '''
                }
            }
        }

        stage('Deploy Frontend to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                    kubectl apply -f K8S/frontend-deployment.yaml
                    kubectl rollout status deployment/frontend
                    '''
                }
            }
        }
    }
  
    post {
        success {
            echo '✅ Déploiement terminé avec succès !'
        }
        failure {
            echo '❌ Échec du pipeline !'
        }
    }
}
