pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'Docker'
        BACKEND_IMAGE = 'ghamlouli/demo'
        FRONTEND_IMAGE = 'ghamlouli/frontend'
    }

    tools {
        nodejs 'NodeJS 18'
    }

    stages {

        stage('Build Backend') {
            steps {
                dir('demo') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean package -DskipTests'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('SonarQube Scan - Backend') {
            steps {
                dir('demo') {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
                            chmod +x mvnw
                            ./mvnw clean verify sonar:sonar \
                                -Dsonar.projectKey=backend \
                                -Dsonar.projectName=backend
                        '''
                    }
                }
            }
        }

        stage('Quality Gate - Backend') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('SonarQube Scan - Frontend') {
            steps {
                dir('frontend') {
                    withSonarQubeEnv('SonarQube1') { 
                        sh '''
                            npx sonar-scanner \
                                -Dsonar.projectKey=frontend \
                                -Dsonar.projectName=frontend \
                                -Dsonar.sources=.
                        '''
                    }
                }
            }
        }

        stage('Quality Gate - Frontend') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Nexus_Publish_backend') {
            steps {
                dir('demo') {
                    script {
                        nexusArtifactUploader(
                            nexusVersion: 'nexus3',
                            protocol: 'http',
                            nexusUrl: '13.38.91.176:8081',
                            groupId: 'com.example',
                            version: "0.0.1-SNAPSHOT-${BUILD_NUMBER}",
                            repository: 'backend',
                            credentialsId: 'nexus',
                            artifacts: [
                                [
                                    artifactId: 'demo',
                                    classifier: '',
                                    file: 'target/demo-0.0.1-SNAPSHOT.jar',
                                    type: 'jar'
                                ]
                            ]
                        )
                    }
                }
            }
        }
stage('Nexus_Publish_Frontend') {
    steps {
        script {
            sh '''
                cd dist
                zip -r ../frontend-1.0.0.zip frontend
            '''
            nexusArtifactUploader(
                nexusVersion: 'nexus3',
                protocol: 'http',
                nexusUrl: '13.38.91.176:8081',
                groupId: 'com.emna.frontend',
                version: '1.0.0',
                repository: 'raw-repo',
                credentialsId: 'nexus',
                artifacts: [[
                    artifactId: 'frontend',
                    classifier: '',
                    file: 'frontend-1.0.0.zip',
                    type: 'zip'
                ]]
            )
        }
    }
}

        stage('Deploy MySQL to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                        kubectl apply -f K8S/mysql-pv.yaml
                        kubectl apply -f K8S/mysql-pvc.yaml
                        kubectl apply -f K8S/mysql-deployment.yaml
                        kubectl rollout status deployment/mysql
                    '''
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                withDockerRegistry(credentialsId: "${DOCKERHUB_CREDENTIALS}", url: '') {
                    sh 'docker system prune -a --volumes -f'
                    sh 'docker build -t ${BACKEND_IMAGE}:latest ./demo'
                    sh 'docker push ${BACKEND_IMAGE}:latest'
                    sh 'docker build -t ${FRONTEND_IMAGE}:latest ./frontend'
                    sh 'docker push ${FRONTEND_IMAGE}:latest'
                }
            }
        }

        stage('Deploy Backend to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                        kubectl apply -f K8S/backend-deployment.yaml
                        kubectl rollout status deployment/backend
                    '''
                }
            }
        }

        stage('Deploy Frontend to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                        kubectl apply -f K8S/frontend-deployment.yaml
                        kubectl rollout status deployment/frontend
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '✅ Déploiement terminé avec succès !'
        }
        failure {
            echo '❌ Échec du pipeline !'
        }
    }
}
