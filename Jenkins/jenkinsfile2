pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'Docker'
        BACKEND_IMAGE = 'ghamlouli/demo'
        FRONTEND_IMAGE = 'ghamlouli/frontend'
        backendTag = "1.0.${BUILD_NUMBER}"
        frontendTag = "1.0.${BUILD_NUMBER}"
    }

    tools {
        nodejs 'NodeJS 18'
    maven 'Maven'
 
    }

    stages {
  stage('Docker Build & Push') {
            steps {
                withDockerRegistry(credentialsId: "${DOCKERHUB_CREDENTIALS}", url: '') {
                    script {
                        sh "docker build -t ${BACKEND_IMAGE}:${backendTag} -t ${BACKEND_IMAGE}:latest ./demo"
                        sh "docker push ${BACKEND_IMAGE}:${backendTag}"
                        sh "docker push ${BACKEND_IMAGE}:latest"

                        sh "docker build -t ${FRONTEND_IMAGE}:${frontendTag} -t ${FRONTEND_IMAGE}:latest ./frontend"
                        sh "docker push ${FRONTEND_IMAGE}:${frontendTag}"
                        sh "docker push ${FRONTEND_IMAGE}:latest"

                        sh "docker image prune -f"
                        sh "docker volume prune -f"
                    }
                }
            }
        }

        stage('Deploy MySQL to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                        kubectl apply -f K8S/mysql-pv.yaml
                        kubectl apply -f K8S/mysql-pvc.yaml
                        kubectl apply -f K8S/mysql-deployment.yaml
                        kubectl rollout status deployment/mysql
                    '''
                }
            }
        }

 
 stage('Deploy Frontend to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                        kubectl apply -f K8S/frontend-deployment.yaml
                        kubectl rollout status deployment/frontend
                    '''
                }
            }
        }

        stage('Deploy Backend to K8s') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh '''
                        kubectl apply -f K8S/backend-deployment.yaml
                        kubectl rollout status deployment/backend
                    '''
                }
            }
        }

       

        stage('Apply Ingress') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes']) {
                    sh 'kubectl apply -f K8S/ingress.yaml'
                }
            }
        }
    }

    post {
        success {
            mail to: 'emnaghamlouli1995@gmail.com',
                 subject: "✅ [${env.JOB_NAME}] - Build #${env.BUILD_NUMBER} succeeded",
                 body: "Le build ${env.BUILD_NUMBER} du job ${env.JOB_NAME} s'est terminé avec succès.\n\nLien : ${env.BUILD_URL}"
        }
        failure {
            mail to: 'emnaghamlouli1995@gmail.com',
                 subject: "❌ [${env.JOB_NAME}] - Build #${env.BUILD_NUMBER} failed",
                 body: "Le build ${env.BUILD_NUMBER} du job ${env.JOB_NAME} a échoué.\n\nLien : ${env.BUILD_URL}"
        }
        always {
            echo 'Notification e-mail envoyée.'
        }
    }
}
